#!/Melify/bin/mac/tclkit

source "/Melify/mtk/dev/tk/src/utl/json2dict.tcl"

######################################################
##### 
######################################################
proc live {} {
    set h {
	"assetType" "symbol" "description" "bidPrice" "bidSize" "bidId" "askPrice" "askSize" "askId" "lastPrice" "lastSize" "lastId" "openPrice" "highPrice" "lowPrice"
	"bidTick" "closePrice" "netChange" "totalVolume" "quoteTimeInLong" "tradeTimeInLong" "mark" "exchange" "exchangeName" "marginable" "shortable" "volatility" "digits" "52WkHigh" "52WkLow" "nAV"
	"peRatio" "divAmount" "divYield" "divDate" "securityStatus" "regularMarketLastPrice" "regularMarketLastSize" "regularMarketNetChange" "regularMarketTradeTimeInLong"
	"netPercentChangeInDouble" "markChangeInDouble" "markPercentChangeInDouble" "regularMarketPercentChangeInDouble" "delayed"
    }

    set output ""

    while {1} {
	if {[catch {
	    exec curl -X GET --header "Authorization: " "https://api.tdameritrade.com/v1/marketdata/c/quotes?apikey=N6RSFI69A6DPXUVJM22BB8T7HFUMXOIW"
	} e] != 0} {
	    set s ""

	    set x [lindex [split $e \n] 0]
	    set y [json::json2dict $x]

	    if {$output != $x} {
		catch {
		    foreach i $h {
			append s "[dict get $y C $i]|"
		    }

		    set s [string replace $s end end "\n"]
		    #puts "\n$s"

		    # CALL TRADER TO PROCESS THIS LINE
		    trader $x
		}
	    }

	    set output $x
	    
	    puts -nonewline ".";flush stdout
	    after 500
	}
    }
}

######################################################
##### 
######################################################
proc reset {} {
    global s e t

    set s 4;# SIZE
    set e 0;# POINTER TO LAST TICK IN ARRAY
    
    # INITIALIZE
    for {set i 1} {$i < $s} {incr i} {
	set t($i) 0
    }
}

######################################################
##### 
######################################################
proc trader {line} {
    global o n s e t trade tot

    set x [lindex [split $line "|"] 9]

    if {$x == $t($e)} {
	# SKIP SAME PRICES
    } else {
	# NEED TO SELL
	if {$o == 1} {
	    if {$x > $t($e)} {
		incr e
		set t($e) $x

		if {$e == [expr $s -1]} {
		    puts -nonewline "SEL, ";flush stdout;

		    for {set i 0} {$i < $s} {incr i} {
			puts -nonewline "$t($i), ";flush stdout;
		    }
		    
		    set tot [expr $tot + [expr $x - $trade]]
		    puts "$tot\n"

		    # NOW BUY (REVERSE)
		    set o 0;

		    # START WITH LAST PRICE
		    set t(0) $x
		    set trade $t(0)
		    
		    reset
		}
	    } else {
		reset
	    }
	}

	# NEED TO BUY
	if {$o == 0} {
	    if {$x < $t($e)} {
		incr e
		set t($e) $x

		if {$e == [expr $s -1]} {
		    puts -nonewline "BUY, ";flush stdout;

		    for {set i 0} {$i < $s} {incr i} {
			puts -nonewline "$t($i), ";flush stdout;
		    }

		    set tot [expr $tot + [expr $trade - $x]]
		    puts "\[$tot\]"

		    # START WITH LAST PRICE
		    set t(0) $t($e)
		    set trade $t(0)
		    set o 1; # NOW BUY (REVERSE)

		    reset
		}
	    } else {
		reset

		# START WITH LAST PRICE
		set t($e) $x
	    }
	}
    }

    #after 10;
    #puts -nonewline .;flush stdout
}

######################################################
##### 
######################################################
proc testing {} {
    global s o n e t trade tot

    puts "> STARTED TESTING:"

    set cnt 0

    set f [open /Melify/mtk/dev/app/links/app.vfs/data/c.quotes r]

    # GET HEADERS
    gets $f
    
    # ASSUME WE ARE LONG
    set o 1;# 1 = SELL, 0 = BUY

    # GET NEXT LINE AND SET ARRAY
    set n [split [gets $f] "|"]
    set e 0
    set t($e) 0; # FIRST TIME THROUGH

    reset 

    #SAVE IT
    set trade $t(0)
    set tot 0

    while {[gets $f line] >= 0} {
	incr cnt
	trader $line
    }

    puts "> PROCESSED: $cnt trades"
}

# USAGE: trader testing|live
if {[catch {
    if {$argc == 0} {
	puts "\nUSAGE: trader testing|live\n"
    } else {
	eval $argv
    }
} e] != 0} {
    puts "\nUSAGE: trader testing|live\n"
}
