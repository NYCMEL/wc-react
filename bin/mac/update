#!/Melify/bin/mac/tclkit

if {$argc != 1} {
    puts "\nUSAGE: codegen <file-name>\n"
    exit
}

lappend auto_path\
    /Melify/mtk/dev/tk/src/utl\
    /Melify/mtk/dev/tk/src/cgi\
    /Melify/mtk/dev/tk/src/utl\
    /Melify/mtk/dev/tk/src/db\
    /Melify/mtk/dev/tk/src/eng

######################################################
##### 
######################################################
set fi [open $argv r]
set fo [open out.$argv w]

set conf		""
set ENV			"dev"
set env(REMOTE_ADDR)	"127.0.0.1"
set env(HTTP_HOST)	"localhost"
set root "/Melify/mtk/dev/tk/lib/components/fm/components"

######################################################
##### 
######################################################
proc parse {line} {
    global spec conf

    catch {unset spec}

    set line [string range $line 5 end-1]
    regsub -all "\"" $line "" line

    foreach i [split $line] {
	set j [split $i =]
	set spec([lindex $j 0]) [lindex $j 1]
    }

    if {[file exist $spec(config)] == 1} {
	set c [file:read $spec(config)]
	set conf [json::json2dict $c]
    }
}

######################################################
##### 
######################################################
proc generate {line} {
    global fi fo spec conf

    parray spec
    puts $conf

    exit

    if {$conf != ""} {
	set id [dict get $conf id]

	set menus ""
	foreach i [dict get $conf menus] {
	    lappend menus [dict get $i id] [dict get $i label]
	}

	# PREPARE VARIABLE FOR TEST PROC
	set ::menus	$menus
	set ::isolate	0
	set ::id	$id
	set ::logo	"[dict get $conf logo]"
	set ::callback	"[dict get $conf callback]"
    }

    lappend ::auto_path $::root/$spec(component)/fm.component.$spec(component).$spec(version)

    set comp "fm::component::$spec(component)"

    # ADD ALL REQUIRED SCRIPTS
    puts $fo [cgi_buffer {${comp}::isolate}]
    puts $fo [cgi_buffer {${comp}::test}]
}

######################################################
##### 
######################################################
proc process {line} {
    global fi fo spec conf

    parse $line

    if {$spec(update) == "true"} {
	#CLEAR ALL PRIOR CODE
	while {[gets $fi tmp] >= 0} {
	    if {[string first "</mtk>" $tmp] !=-1} {
		generate $line
		break
	    }
	}

	puts $fo "</mtk>"
    }
}

######################################################
##### 
######################################################
while {[gets $fi line] >= 0} {
    puts $fo $line

    set line [string trim $line]

    if {[string first "<mtk " $line] !=-1} {
	#FOUND A COMPONENT
	process $line
    }
}
